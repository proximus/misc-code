#!/usr/bin/expect -d
#===============================================================================
#
#          FILE:  cmd-parsing.exp
#
#         USAGE:  ./cmd-parsing.exp --help
#
#   DESCRIPTION:  ---
#
#       OPTIONS:  ---
#  REQUIREMENTS:  ---
#          BUGS:  ---
#         NOTES:  ---
#        AUTHOR:  Samuel Gabrielsson (samuel.gabrielsson@gmail.com)
#       COMPANY:  ---
#       VERSION:  1.0
#       CREATED:  2015-03-10 09:00:00 CET
#      REVISION:  ---
#       CHANGES:  ---
#
#===============================================================================

#===============================================================================
# Function removes the first element of a list and returns it. The list must be
# passed by name.
#
# lshift <inputlist>                # List to be left shifted
#
#===============================================================================
proc lshift {inputlist} {

    # Upvar will create a link to a variable in a different stack frame, i.e. we
    # let the local variable refer to a global variable.
    upvar 1 $inputlist argv

    # Save the first element in the list
    set arg  [lindex $argv 0]

    # Replace an element of a list with another
    set argv [lreplace $argv[set argv {}] 0 0]

    # Return the left shifted element
    return $arg
}

#===============================================================================
# Function will print usage and information on how to run the script.
#
# usage                             # Print usage information
#
#===============================================================================
proc usage {} {
    set prog $::argv0

    # Get basename of prog
    regsub {.*/} $prog "" prog

    set usage_message "
Usage: $prog \[--help]
             \[--config <file>]
             \[--bootloader <file>]
             \[--uboot <file>] \[--kernel <img>] \[--device-tree <file>] \[--rootfs <img>]

$prog is a program used to run emulated radio

Options:
    --bootloader <file>     Bootloader file.

    --config <file>         Configuration file.

    --device-tree <file>    Device tree blob (dtb) file.

    --help                  Show this help text.

    --kernel <img>          Linux kernel image file.

    --rootfs <img>          Root filesystem image file.

    --uboot <file>          Uboot file.

Report bugs to samuel.gabrielsson@gmail.com
Home page: https://github.com/proximus/misc-code

Example: ...
"
    puts stderr $usage_message
    exit 1
}

# Default variables
# Precedense 4
# - Can be replaced by variables in precedense 1, 2 and 3.

# Default bootloader
set bootloader "$svp_xsim_dir/bin/svp_a7_boot_loader.bin"
if { ![file exists $bootloader] } {
    puts "No default bootloader found at: $bootloader"
}

# Default images directory
set img_dir "/proj/ghost/users/xenon/PA17"
if { ![file exists $img_dir] } {
    puts "No default image directory found at: $img_dir"
}

# Default uboot
set uboot "$img_dir/bootimage.bin"
if { ![file exists $uboot] } {
    puts "No default uboot found at: $uboot"
}

# Default kernel image
set kernel "$img_dir/uImage-xenon.bin"
if { ![file exists $kernel] } {
    puts "No default kernel image found at: $kernel"
}

# Default device tree blob
set device_tree "$img_dir/uImage-xenon.dtb"
if { ![file exists $device_tree] } {
    puts "No default device tree blob found at: $device_tree"
}

# Default root filesystem image
set rootfs "$img_dir/rootfs-dev-xenon.cpio.xz.u-boot"
if { ![file exists $rootfs] } {
    puts "No default root filesystem image found at: $rootfs"
}

# Default target addresses
set bootloader_addr 0xFFFF0000
set uboot_addr      0x86000000
set kernel_addr     0xA00000
set dtb_addr        0x10000000
set rootfs_addr     0x08000000
set lmc_addr        0x20000000

# Default ethernet configuration
set eth_export_ports 22,23
set eth_host_base    50000
set eth_enable       1


#===============================================================================
# Parse arguments from commandline
#===============================================================================
set cmdline $argv
while { [llength $cmdline] } {
    set arg [lshift cmdline]

    switch -exact -- $arg {
        --bootloader {
            set bootloader_ [lshift cmdline]
        }
        --config {
            set config_file_ [lshift cmdline]
        }
        --device-tree-blob {
            set device_tree_ [lshift cmdline]
        }
        --help {
            usage
        }
        --kernel {
            set kernel_ [lshift cmdline]
        }
        --rootfs {
            set rootfs_ [lshift cmdline]
        }
        --uboot {
            set uboot_ [lshift cmdline]
        }
        default { puts stderr "Error: Unknown command line flag: $arg"; usage }
    }
}

#===============================================================================
# Precedense 3 will:
#   - replace matching default variables.
#===============================================================================
# Handle main config file
set config_file "~/.svp/svp.conf"
if { [file exists $config_file] } {
    puts "Using config file: $config_file"
    eval source $config_file
} else {
    puts "No config file found at: $config_file"
}

#===============================================================================
# Precedence 2 will:
#   - replace matching default variables.
#   - replace matching variables set in main config file.
#===============================================================================
# Handle commandline config file
if { [info exists config_file_] } {
    if { [file exists $config_file_] } {
        puts "Using config file: $config_file_"
        eval source $config_file_
    } else {
        puts stderr "Error: No config file found at: $config_file_"
        exit 1
    }
}

#===============================================================================
# Precedence 1 will:
#   - replace matching default variable.
#   - replace matching variable set in main config file.
#   - replace matching variable set in commandline config file.
#===============================================================================

# Handle bootloader variable
if { [info exists bootloader_] } {
    if { [file exists $bootloader_] } {
        puts "Using bootloader at: $bootloader_"
        set bootloader $bootloader_
    } else {
        puts stderr "Error: No bootloader found at: $bootloader_"
        exit 1
    }
}

# Handle uboot variable
if { [info exists uboot_] } {
    if { [file exists $uboot_] } {
        puts "Using uboot at: $uboot_"
        set uboot $uboot_
    } else {
        puts stderr "Error: No uboot found at: $uboot_"
        exit 1
    }
}

# Handle kernel image variable
if { [info exists kernel_] } {
    if { [file exists $kernel_] } {
        puts "Using kernel image at: $kernel_"
        set kernel $kernel_
    } else {
        puts stderr "Error: No kernel image found at: $kernel_"
        exit 1
    }
}

# Handle device tree blob variable
if { [info exists device_tree_] } {
    if { [file exists $device_tree_] } {
        puts "Using device tree blob at: $device_tree_"
        set device_tree $device_tree_
    } else {
        puts stderr "Error: No device tree blob found at: $device_tree_"
        exit 1
    }
}

# Handle root filesystem image variable
if { [info exists rootfs_] } {
    if { [file exists $rootfs_] } {
        puts "Using root filesystem image at: $rootfs_"
        set rootfs $rootfs_
    } else {
        puts stderr "Error: No root filesystem image found at: $rootfs_"
        exit 1
    }
}

#===============================================================================
# MAIN
#===============================================================================

puts "\n#==============================================================================="
puts "Config:"
puts "set bootloader    $bootloader"
puts "set uboot         $uboot"
puts "set kernel        $kernel"
puts "set device_tree   $device_tree"
puts "set rootfs        $rootfs"
puts "#==============================================================================="

#parray env
exit 0
