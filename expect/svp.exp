#!/usr/bin/expect -d
#===============================================================================
#
#          FILE:  svp.exp
#
#         USAGE:  ./svp.exp --help
#
#   DESCRIPTION:  Start up simulation
#
#       OPTIONS:  ---
#  REQUIREMENTS:  ---
#          BUGS:  ---
#         NOTES:  ---
#        AUTHOR:  Samuel Gabrielsson (samuel.gabrielsson@ericsson.com)
#       COMPANY:  ---
#       VERSION:  1.0
#       CREATED:  2015-03-10 09:00:00 CET
#      REVISION:  ---
#       CHANGES:  ---
#
#===============================================================================
# Disable debug as default
exp_internal 0

#===============================================================================
# Function will execute commands when this program is about to exit.
#
# exit -onexit                      # Exit function
#
#===============================================================================
exit -onexit {
    puts "Goodbye!"
}

#===============================================================================
# Function will check if a file exists in a given path. Print message if it does
# not exist.
#
# check_default <path>              # Check if path exists
#
#===============================================================================
proc check_default { path } {
    # If file does not exist, then print a message
    if { ![file exists $path] } {
        puts stderr "Does not exist: $path"
    }
}

#===============================================================================
# Function will check if a file exists in the given path and try to source it.
#
# source_config <path>               # Check if path exists
#
#===============================================================================
proc source_config { path } {
    # If file exist, then print message and source the config file
    if { [file exists $path] } {
        puts "Using config file: $path"
        # Evaluate all variables to the global namespace
        namespace inscope :: eval source $path
        return 1
    } else {
        puts stderr "No config file: $path"
        return 0
    }
}

#===============================================================================
# Function will check if a file exists in a given path. Print message if it does
# not exist and exit.
#
# check_default <path>              # Check if path exists
#
#===============================================================================
proc check_cmdline { path } {

    # Check if file exist and return its path if it does.
    if { [file exists $path] } {
        return $path
    } else {
        # Print a message and exit if file does not exist.
        puts stderr "Does not exist: $path"
        puts "Exiting..."
        exit 1
    }
}

#===============================================================================
# Function removes the first element of a list and returns it. The list must be
# passed by name.
#
# lshift <inputlist>                # List to be left shifted
#
#===============================================================================
proc lshift {inputlist} {

    # Upvar will create a link to a variable in a different stack frame, i.e. we
    # let the local variable refer to a global variable.
    upvar 1 $inputlist argv

    # Save the first element in the list
    set arg  [lindex $argv 0]

    # Replace an element of a list with another
    set argv [lreplace $argv[set argv {}] 0 0]

    # Return the left shifted element
    return $arg
}

#===============================================================================
# Function will expect a prompt.
#
# expect_prompt <prompt>            # Expect prompt
#
#===============================================================================
proc expect_prompt { prompt } {
    # Expect the prompt to show up
    expect {
        -re "(Error: .*)\r\n" { puts "$expect_out(1,string)" }
        "$prompt" { }
        default { puts "Error: Failed to expect prompt"; exit 1 }
    }
}

#===============================================================================
# Function will print usage and information on how to run the script.
#
# usage                             # Print usage information
#
#===============================================================================
proc usage {} {
    set prog $::argv0

    # Get basename of prog
    regsub {.*/} $prog "" prog

    set usage_message "
Usage: $prog \[--help] \[--debug]
             \[--svp-xsim <dir>]
             \[--config <file>]
             \[--bootloader <file>]
             \[--uboot <file>] \[--kernel <img>] \[--device-tree <file>] \[--rootfs <img>]

$prog is a program used to run emulated radio

Options:
    --bootloader <file>     Bootloader file

    --config <file>         Configuration file

    --debug                 Enable debug mode

    --device-tree <file>    Device tree blob (dtb) file

    --help                  Show this help text

    --kernel <img>          Linux kernel image file

    --rootfs <img>          Root filesystem image file

    --svp-xsim <dir>        SVP XSIM directory

    --uboot <file>          Uboot file

Report bugs to samuel.gabrielsson@gmail.com
Home page: https://github.com/proximus/misc-code\n"

    puts stderr $usage_message
    exit 1
}

#===============================================================================
# Precedense 4
# - Can be replaced by variables in precedense 1, 2 and 3.
#===============================================================================
# Default variables

# Set a default SVP XSIM directory and check if it exists
set svp_xsim_dir "/proj/svp/release/inofficial/svp_xsim_latest"
check_default $svp_xsim_dir

# Set a default SVP XSIM setup script if it exists
set svp_xsim_setup "$svp_xsim_dir/setup.csh"
check_default $svp_xsim_setup

# Set a default command line interface (CLI) path and check if it exists
set svp_xsim_cli "$svp_xsim_dir/cli"
check_default $svp_xsim_cli

# Set a default bootloader and check if it exists
set bootloader "$svp_xsim_dir/bin/svp_a7_boot_loader.bin"
check_default $bootloader

# Set a default images directory and check if it exists
set img_dir "/proj/ghost/users/xenon/PA17"
check_default $img_dir

# Set a default uboot and check if it exists
set uboot "$img_dir/bootimage.bin"
check_default $uboot

# Set a default kernel image and check if it exists
set kernel "$img_dir/uImage-xenon.bin"
check_default $kernel

# Set default device tree blob and check if it exists
set device_tree "$img_dir/uImage-xenon.dtb"
check_default $device_tree

# Set default root filesystem image and check if it exists
set rootfs "$img_dir/rootfs-dev-xenon.cpio.xz.u-boot"
check_default $rootfs

# Default SVP prompt
set cli_prompt "svp>"

# Default user SHELL prompt
set shell_prompt "$env(USER)@*\$ "

# Default target addresses
set bootloader_addr 0xFFFF0000
set uboot_addr      0x86000000
set kernel_addr     0xA00000
set dtb_addr        0x10000000
set rootfs_addr     0x08000000
set lmc_addr        0x20000000

# Default ethernet configuration
set eth_export_ports 22,23
set eth_host_base    50000
set eth_enable       1

#===============================================================================
# Parse arguments from commandline
#===============================================================================
set cmdline $argv
while { [llength $cmdline] } {
    set arg [lshift cmdline]

    switch -exact -- $arg {
        --bootloader {
            set bootloader_ [lshift cmdline]
        }
        --config {
            set config_ [lshift cmdline]
        }
        --debug {
            log_user 1
            exp_internal 1
        }
        --device-tree {
            set device_tree_ [lshift cmdline]
        }
        --help {
            usage
        }
        --kernel {
            set kernel_ [lshift cmdline]
        }
        --rootfs {
            set rootfs_ [lshift cmdline]
        }
        --svp-xsim {
            set svp_xsim_dir_ [lshift cmdline]
        }
        --uboot {
            set uboot_ [lshift cmdline]
        }
        default { puts stderr "Error: Unknown command line flag: $arg"; usage }
    }
}

#===============================================================================
# Precedense 3 will:
#   - replace matching default variables.
#===============================================================================
# Source default config file
set default_config "~/.svp/default.conf"
source_config $default_config

#===============================================================================
# Precedence 2 will:
#   - replace matching default variables.
#   - replace matching variables set in main config file.
#===============================================================================
# Source config file from commandline
if { [info exists config_] } {
    if { ![source_config $config_] } { puts "Exiting..."; exit 1 }
}

#===============================================================================
# Precedence 1 will:
#   - replace matching default variable.
#   - replace matching variable set in main config file.
#   - replace matching variable set in commandline config file.
#===============================================================================
# Set SVP XSIM directory variable
if { [info exists svp_xsim_dir_] } {
    set svp_xsim_dir [check_cmdline $svp_xsim_dir_]
}

# Set bootloader variable
if { [info exists bootloader_] } {
    set bootloader [check_cmdline $bootloader_]
}

# Set uboot variable
if { [info exists uboot_] } {
    set uboot [check_cmdline $uboot_]
}

# Set kernel image variable
if { [info exists kernel_] } {
    set kernel [check_cmdline $kernel_]
}

# Set device tree blob variable
if { [info exists device_tree_] } {
    set device_tree [check_cmdline $device_tree_]
}

# Set root filesystem image variable
if { [info exists rootfs_] } {
    set rootfs [check_cmdline $rootfs_]
}

#===============================================================================
# MAIN
#===============================================================================

# Spawn a shell and expect a prompt after a couple of seconds.
set timeout 5
spawn $env(SHELL)
set shell_id $spawn_id
expect_prompt $shell_prompt

# Create model hierarchy
puts "Creating model hierarchy..."
send -i $shell_id "source $svp_xsim_setup xenon\n"
expect_prompt $shell_prompt

# Start the command line interface (CLI)
send -i $shell_id "$svp_xsim_cli\n"
expect_prompt $cli_prompt

# Create the model hierarchy
send -i $shell_id "create\n"
expect_prompt $cli_prompt

#send "create\n"
#expect_prompt $cli_prompt

#expect "svp>"
#send "setattr top.unnamed1.arm7.eth_export_ports $eth_export_ports\n"
#expect "svp>"
#send "setattr top.unnamed1.arm7.eth_host_base $eth_host_base\n"
#expect "svp>"
#send "setattr top.unnamed1.arm7.eth_enabled $eth_enable\n"
#
#expect "svp>"
#send "start arm 1\n"
#
#expect "running to completion"
#send "\n"
#expect "svp>"
#send "load $bootloader_image $bootloader_addr\n"
#expect "svp>"
#send "load $uboot_image $uboot_addr\n"
#expect "svp>"
#send "load $kernel_image $kernel_addr\n"
#expect "svp>"
#send "load $dtb_image $dtb_addr\n"
#expect "svp>"
#send "load $rootfs_image $rootfs_addr\n"
#expect "svp>"
#send "setattr top.unnamed1.arm7.cpuporeset 0\n"

puts "\n#==============================================================================="
puts "Config:"
puts "set svp_xsim_dir      $svp_xsim_dir"
puts "set svp_xsim_setup    $svp_xsim_setup"
puts "set svp_xsim_cli      $svp_xsim_cli"
puts "set bootloader        $bootloader"
puts "set uboot             $uboot"
puts "set kernel            $kernel"
puts "set device_tree       $device_tree"
puts "set rootfs            $rootfs"
puts "#==============================================================================="

#parray env
exit 0
