#!/usr/bin/expect -d
#===============================================================================
#
#          FILE:  svp.exp
#
#         USAGE:  ./svp.exp --help
#
#   DESCRIPTION:  Start up SVP XSIM simulation
#
#       OPTIONS:  ---
#  REQUIREMENTS:  SVP XSIM
#          BUGS:  ---
#         NOTES:  ---
#        AUTHOR:  Samuel Gabrielsson (samuel.gabrielsson@ericsson.com)
#       COMPANY:  ---
#       VERSION:  1.0
#       CREATED:  2015-03-10 09:00:00 CET
#      REVISION:  ---
#       CHANGES:  ---
#
#===============================================================================
# Disable debug as default
exp_internal 0

#===============================================================================
# Function will execute commands when this program is about to exit
#
# exit -onexit                      # Exit function
#
#===============================================================================
exit -onexit {
    puts "Goodbye!"
}

#===============================================================================
# Function will search for the latest version of a file in directory
#
# latest_file <dir>                 # Return latest version of file in directory
#
#===============================================================================
proc latest_file { dir } {
    return [lindex [lsort -dictionary -decreasing -nocase [glob -dir $dir svp-xsim-*]] 0]
}

#===============================================================================
# Function removes the first element of a list and returns it. The list must be
# passed by name.
#
# lshift <inputlist>                # List to be left shifted
#
#===============================================================================
proc lshift { inputlist } {

    # Upvar will create a link to a variable in a different stack frame, i.e. we
    # let the local variable refer to a global variable.
    upvar 1 $inputlist argv

    # Save the first element in the list
    set arg [lindex $argv 0]

    # Replace an element of a list with another
    set argv [lreplace $argv[set argv {}] 0 0]

    # Return the left shifted element
    return $arg
}

#===============================================================================
# Function will check if a file exists in a given path. Print message if it does
# not exist and exit.
#
# check <path>                      # Check if path exists
#
#===============================================================================
proc check { path } {

    # Check if file exist and return its path if it does.
    if { [file exists $path] } {
        return $path
    } else {
        # Print a message and exit if file does not exist.
        puts stderr "Error: File does not exist: $path"
        exit 1
    }
}

#===============================================================================
# Function will check if a file exists in the given path and try to source it
#
# source_config <path>               # Check if path exists
#
#===============================================================================
proc source_config { path } {
    # If file exist, then print message and source the config file
    if { [file exists $path] } {
        puts "Using config file: $path"
        # Evaluate all variables to the global namespace
        namespace inscope :: eval source $path
        return 1
    } else {
        puts stderr "Error: No config file: $path"
        return 0
    }
}

#===============================================================================
# Function will expect a prompt
#
# expect_prompt <prompt>            # Expect prompt
#
#===============================================================================
proc expect_prompt { prompt } {
    # Expect the prompt to show up
    expect {
        -re "(Error: .*)\r\n" { puts "$expect_out(1,string)"; exit 1 }
        "$prompt" { }
        default { puts "Error: Failed to expect prompt"; exit 1 }
    }
}

#===============================================================================
# Function will set a value in the cli and check for faults
#
# cli_set <cmd>                     # Run a command on the cli
#
#===============================================================================
proc cli_set { cmd } {
    send "$cmd\r"
    expect {
        -re "\r\n(\[S|s]et .* to .*)\r\n" { puts "$expect_out(1,string)" }
        -re "\r\n(\[U|u]nable to set .* to .*)\r\n" { puts "Error: $expect_out(1,string)"; exit 1 }
        "(Error: syntax error)" { puts "$expect_out(1,string)"; exit 1 }
        default { puts "Error: Failed to run command: $cmd"; exit 1 }
    }
    expect_prompt $::cli_prompt
}

#===============================================================================
# Function will print usage and information on how to run the script
#
# usage                             # Print usage information
#
#===============================================================================
proc usage {} {
    set prog $::argv0

    # Get basename of prog
    regsub {.*/} $prog "" prog

    set usage_message "
Usage: $prog \[--help] \[--debug]
               \[--svp-xsim <dir>]
               \[--config <file>]
               \[--bootloader <file>]
               \[--uboot <file>] \[--kernel <img>] \[--device-tree <file>] \[--rootfs <img>]

$prog is a program used to run emulated radio

Options:
    --bootloader <file>     Bootloader file

    --config <file>         Configuration file

    --debug                 Enable debug mode

    --device-tree <file>    Device tree blob (dtb) file

    --help                  Show this help text

    --kernel <img>          Linux kernel image file

    --rootfs <img>          Root filesystem image file

    --svp-xsim <dir>        SVP XSIM directory

    --uboot <file>          Uboot file

Report bugs to samuel.gabrielsson@gmail.com
Home page: https://github.com/proximus/misc-code\n"

    puts stderr $usage_message
    exit 1
}

#===============================================================================
# Variables defined as default variables will be:
# - replaced by matching variables in config files or from command line
#===============================================================================
# Default variables

# Get the path to this script
set prog_dir [file dirname [info script]]

# Default config and lib directory
set cfg_dir [file join $prog_dir cfg]
set lib_dir [file join $prog_dir lib]

# Default (latest) SVP XSIM config and lib files
set cfg_file [latest_file $cfg_dir]
set lib_file [latest_file $lib_dir]

# Default SVP prompt
set cli_prompt "svp>"

# Default user SHELL prompt
set shell_prompt "$env(USER)@*\$ "

#===============================================================================
# Parse arguments from commandline
#===============================================================================
set cmdline $argv
while { [llength $cmdline] } {
    set arg [lshift cmdline]

    switch -exact -- $arg {
        --bootloader {
            set bootloader_ [lshift cmdline]
        }
        --config {
            set config_ [lshift cmdline]
        }
        --debug {
            log_user 1
            exp_internal 1
        }
        --device-tree {
            set device_tree_ [lshift cmdline]
        }
        --help {
            usage
        }
        --kernel {
            set kernel_ [lshift cmdline]
        }
        --rootfs {
            set rootfs_ [lshift cmdline]
        }
        --svp-xsim {
            set svp_xsim_dir_ [lshift cmdline]
        }
        --uboot {
            set uboot_ [lshift cmdline]
        }
        default { puts stderr "Error: Unknown command line flag: $arg"; usage }
    }
}

#===============================================================================
# Variables defined in config file will be:
#   - replaced by matching default variables
#===============================================================================
# If config file is defined in command line, then source it. Otherwise, use
# latest config file but exit if it fails.
if { [info exists config_] } {
    # If config file does not exist, then exit with error
    if { ![source_config $config_] } {
        puts "Error: Failed to source: $config_"; exit 1
    }
} else {
    # If default config file does not exist, then exit with error
    if { ![source_config $cfg_file] } {
        puts "Error: Failed to source: $cfg_file"; exit 1
    }
}

#===============================================================================
# Variables defined in command line will be:
#   - replaced by matching default variables
#   - replaced by matching variables set in any config file
#===============================================================================
# Set SVP XSIM directory variable
if { [info exists svp_xsim_dir_] } {
    set svp_xsim_dir [check $svp_xsim_dir_]
}

# Set bootloader variable
if { [info exists bootloader_] } {
    set bootloader [check $bootloader_]
}

# Set uboot variable
if { [info exists uboot_] } {
    set uboot [check $uboot_]
}

# Set kernel image variable
if { [info exists kernel_] } {
    set kernel [check $kernel_]
}

# Set device tree blob variable
if { [info exists device_tree_] } {
    set device_tree [check $device_tree_]
}

# Set root filesystem image variable
if { [info exists rootfs_] } {
    set rootfs [check $rootfs_]
}

#===============================================================================
# Do sanity check of defined variables:
#
# set svp_xsim_dir      /proj/svp/release/inofficial/svp_xsim_<latest>
# set svp_xsim_setup    $svp_xsim_dir/setup.csh
# set svp_xsim_cli      $svp_xsim_dir/cli
# set bootloader        $svp_xsim_dir/bin/svp_a7_boot_loader.bin
#
# set img_dir           /proj/ghost/users/xenon/LATEST
# set uboot             $img_dir/bootimage.bin
# set kernel            $img_dir/uImage-xenon.bin
# set device_tree       $img_dir/uImage-xenon.dtb
# set rootfs            $img_dir/rootfs-dev-xenon.cpio.xz.u-boot
#
#===============================================================================
# Check if SVP XSIM directory exists
check $svp_xsim_dir

# Check if SVP XSIM setup script exists
check $svp_xsim_setup

# Check if SVP XSIM CLI program exists
check $svp_xsim_cli

# Check if ARM Cortex-A7 bootloader exists
check $bootloader

# Check if Images directory exists
check $img_dir

# Check if Uboot exists
check $uboot

# Check if Linux Kernel exists
check $kernel

# Check if Device Tree Blob exists
check $device_tree

# Check if Root Filesystem Image exists
check $rootfs

puts "\n#==============================================================================="
puts "Config:"
puts $prog_dir
puts $cfg_dir
puts $cfg_file
puts $lib_dir
puts $lib_file
puts "set svp_xsim_dir      $svp_xsim_dir"
puts "set svp_xsim_setup    $svp_xsim_setup"
puts "set svp_xsim_cli      $svp_xsim_cli"
puts "set bootloader        $bootloader"
puts "set img_dir           $img_dir"
puts "set uboot             $uboot"
puts "set kernel            $kernel"
puts "set device_tree       $device_tree"
puts "set rootfs            $rootfs"
puts "#==============================================================================="

#===============================================================================
# MAIN
#===============================================================================
# Spawn a shell and expect a prompt after a couple of seconds
set timeout 5
spawn $env(SHELL)
set shell_id $spawn_id
expect_prompt $shell_prompt

# Source SVP XSIM setup file
puts "Sourcing SVP XSIM setup file..."
send -i $shell_id "source $svp_xsim_setup xenon; echo $?\n"
expect {
    "\r\n0\r\n" { puts "Done sourcing SVP XSIM setup file" }
    default {puts "Error: Failed to source SVP XSIM setup file"; exit 1 }
}
expect_prompt $shell_prompt

# Start the command line interface (CLI)
set timeout 5
send -i $shell_id "$svp_xsim_cli\n"
expect_prompt $cli_prompt

# Source SVP XSIM library file dependent on version
if { ![source_config $lib_file] } {
    puts "Error: Failed to source: $lib_file"; exit 1
}

set timeout 1
# Enter interact mode
# NOTE Fix interact mode later. Maybe send exit in on-exit function.
set CTRLZ \032
set EXIT \003
interact {
    -reset $CTRLZ {
        exec kill -STOP [pid]
    }
    \001 {
        send_user "you typed a control-A\n"
        exp_send "\001"
    }
    $ {
        send_user "The date is [exec date]."
    }
    \033    exit
    ~~
}
